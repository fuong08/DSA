import java.io.*;
import java.util.*;

public class Solution {

    static int[] segTree;

    static void buildTree(int[] arr, int[] segTree, int low, int high, int pos) {
        if (low == high) {
            segTree[pos] = arr[low];
            return;
        }

        int mid = (low + high) / 2;
        buildTree(arr, segTree, low, mid, 2 * pos + 1);
        buildTree(arr, segTree, mid + 1, high, 2 * pos + 2);

        segTree[pos] = Math.min(segTree[2 * pos + 1], segTree[2 * pos + 2]);
    }

    static int query(int[] segTree, int qlow, int qhigh, int low, int high, int pos) {
        if (qlow <= low && qhigh >= high) {
            return segTree[pos];
        }

        if (qlow > high || qhigh < low) {
            return Integer.MAX_VALUE;
        }

        int mid = (low + high) / 2;
        return Math.min(query(segTree, qlow, qhigh, low, mid, 2 * pos + 1),
                        query(segTree, qlow, qhigh, mid + 1, high, 2 * pos + 2));
    }

    static void update(int[] segTree, int idx, int val, int low, int high, int pos) {
        if (low == high) {
            segTree[pos] = val;
            return;
        }

        int mid = (low + high) / 2;
        if (idx <= mid) {
            update(segTree, idx, val, low, mid, 2 * pos + 1);
        } else {
            update(segTree, idx, val, mid + 1, high, 2 * pos + 2);
        }

        segTree[pos] = Math.min(segTree[2 * pos + 1], segTree[2 * pos + 2]);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));
        int maxSize = 2 * (int) Math.pow(2, x) - 1;

        segTree = new int[maxSize];
        buildTree(arr, segTree, 0, n - 1, 0);

        int q = scanner.nextInt();
        for (int i = 0; i < q; i++) {
            int queryType = scanner.nextInt();
            if (queryType == 1) {
                int l = scanner.nextInt() - 1;
                int r = scanner.nextInt() - 1;
                int result = query(segTree, l, r, 0, n - 1, 0);
                System.out.println(result);
            } else if (queryType == 2) {
                int id = scanner.nextInt() - 1;
                int v = scanner.nextInt();
                update(segTree, id, v, 0, n - 1, 0);
            }
        }
    }
}
